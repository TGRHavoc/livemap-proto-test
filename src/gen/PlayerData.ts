// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "PlayerData.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Value } from "./google/protobuf/struct";
/**
 * @generated from protobuf message PlayerUpdate
 */
export interface PlayerUpdate {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: PlayerUpdate.PlayerData data = 2;
     */
    data?: PlayerUpdate_PlayerData;
}
/**
 * @generated from protobuf message PlayerUpdate.PlayerData
 */
export interface PlayerUpdate_PlayerData {
    /**
     * @generated from protobuf field: optional string name = 1;
     */
    name?: string;
    /**
     * @generated from protobuf field: optional PlayerUpdate.Vec3 position = 2;
     */
    position?: PlayerUpdate_Vec3;
    /**
     * @generated from protobuf field: map<string, google.protobuf.Value> identifiers = 3;
     */
    identifiers: {
        [key: string]: Value;
    };
    /**
     * @generated from protobuf field: map<string, google.protobuf.Value> metadata = 4;
     */
    metadata: {
        [key: string]: Value;
    };
}
/**
 * @generated from protobuf message PlayerUpdate.Vec3
 */
export interface PlayerUpdate_Vec3 {
    /**
     * @generated from protobuf field: float x = 1;
     */
    x: number;
    /**
     * @generated from protobuf field: float y = 2;
     */
    y: number;
    /**
     * @generated from protobuf field: float z = 3;
     */
    z: number;
}
/**
 * @generated from protobuf message PlayerLeft
 */
export interface PlayerLeft {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class PlayerUpdate$Type extends MessageType<PlayerUpdate> {
    constructor() {
        super("PlayerUpdate", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "data", kind: "message", T: () => PlayerUpdate_PlayerData }
        ]);
    }
    create(value?: PartialMessage<PlayerUpdate>): PlayerUpdate {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        if (value !== undefined)
            reflectionMergePartial<PlayerUpdate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerUpdate): PlayerUpdate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* PlayerUpdate.PlayerData data */ 2:
                    message.data = PlayerUpdate_PlayerData.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerUpdate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* PlayerUpdate.PlayerData data = 2; */
        if (message.data)
            PlayerUpdate_PlayerData.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlayerUpdate
 */
export const PlayerUpdate = new PlayerUpdate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerUpdate_PlayerData$Type extends MessageType<PlayerUpdate_PlayerData> {
    constructor() {
        super("PlayerUpdate.PlayerData", [
            { no: 1, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "position", kind: "message", T: () => PlayerUpdate_Vec3 },
            { no: 3, name: "identifiers", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Value } },
            { no: 4, name: "metadata", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Value } }
        ]);
    }
    create(value?: PartialMessage<PlayerUpdate_PlayerData>): PlayerUpdate_PlayerData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.identifiers = {};
        message.metadata = {};
        if (value !== undefined)
            reflectionMergePartial<PlayerUpdate_PlayerData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerUpdate_PlayerData): PlayerUpdate_PlayerData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string name */ 1:
                    message.name = reader.string();
                    break;
                case /* optional PlayerUpdate.Vec3 position */ 2:
                    message.position = PlayerUpdate_Vec3.internalBinaryRead(reader, reader.uint32(), options, message.position);
                    break;
                case /* map<string, google.protobuf.Value> identifiers */ 3:
                    this.binaryReadMap3(message.identifiers, reader, options);
                    break;
                case /* map<string, google.protobuf.Value> metadata */ 4:
                    this.binaryReadMap4(message.metadata, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: PlayerUpdate_PlayerData["identifiers"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PlayerUpdate_PlayerData["identifiers"] | undefined, val: PlayerUpdate_PlayerData["identifiers"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Value.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field PlayerUpdate.PlayerData.identifiers");
            }
        }
        map[key ?? ""] = val ?? Value.create();
    }
    private binaryReadMap4(map: PlayerUpdate_PlayerData["metadata"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PlayerUpdate_PlayerData["metadata"] | undefined, val: PlayerUpdate_PlayerData["metadata"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Value.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field PlayerUpdate.PlayerData.metadata");
            }
        }
        map[key ?? ""] = val ?? Value.create();
    }
    internalBinaryWrite(message: PlayerUpdate_PlayerData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string name = 1; */
        if (message.name !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* optional PlayerUpdate.Vec3 position = 2; */
        if (message.position)
            PlayerUpdate_Vec3.internalBinaryWrite(message.position, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* map<string, google.protobuf.Value> identifiers = 3; */
        for (let k of globalThis.Object.keys(message.identifiers)) {
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Value.internalBinaryWrite(message.identifiers[k], writer, options);
            writer.join().join();
        }
        /* map<string, google.protobuf.Value> metadata = 4; */
        for (let k of globalThis.Object.keys(message.metadata)) {
            writer.tag(4, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Value.internalBinaryWrite(message.metadata[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlayerUpdate.PlayerData
 */
export const PlayerUpdate_PlayerData = new PlayerUpdate_PlayerData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerUpdate_Vec3$Type extends MessageType<PlayerUpdate_Vec3> {
    constructor() {
        super("PlayerUpdate.Vec3", [
            { no: 1, name: "x", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "y", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "z", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerUpdate_Vec3>): PlayerUpdate_Vec3 {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.x = 0;
        message.y = 0;
        message.z = 0;
        if (value !== undefined)
            reflectionMergePartial<PlayerUpdate_Vec3>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerUpdate_Vec3): PlayerUpdate_Vec3 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float x */ 1:
                    message.x = reader.float();
                    break;
                case /* float y */ 2:
                    message.y = reader.float();
                    break;
                case /* float z */ 3:
                    message.z = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerUpdate_Vec3, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float x = 1; */
        if (message.x !== 0)
            writer.tag(1, WireType.Bit32).float(message.x);
        /* float y = 2; */
        if (message.y !== 0)
            writer.tag(2, WireType.Bit32).float(message.y);
        /* float z = 3; */
        if (message.z !== 0)
            writer.tag(3, WireType.Bit32).float(message.z);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlayerUpdate.Vec3
 */
export const PlayerUpdate_Vec3 = new PlayerUpdate_Vec3$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerLeft$Type extends MessageType<PlayerLeft> {
    constructor() {
        super("PlayerLeft", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerLeft>): PlayerLeft {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        if (value !== undefined)
            reflectionMergePartial<PlayerLeft>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerLeft): PlayerLeft {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerLeft, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlayerLeft
 */
export const PlayerLeft = new PlayerLeft$Type();
